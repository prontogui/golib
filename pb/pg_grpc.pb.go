// Copyright 2024 ProntoGUI, LLC.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: proto/pg.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PGService_StreamUpdates_FullMethodName = "/PGService/StreamUpdates"
)

// PGServiceClient is the client API for PGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A simple symetric service that can be implemented by either the service or app or both.  This
// service streams updates bidirectionally between both sides.
type PGServiceClient interface {
	StreamUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PGUpdate, PGUpdate], error)
}

type pGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPGServiceClient(cc grpc.ClientConnInterface) PGServiceClient {
	return &pGServiceClient{cc}
}

func (c *pGServiceClient) StreamUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PGUpdate, PGUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PGService_ServiceDesc.Streams[0], PGService_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PGUpdate, PGUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PGService_StreamUpdatesClient = grpc.BidiStreamingClient[PGUpdate, PGUpdate]

// PGServiceServer is the server API for PGService service.
// All implementations must embed UnimplementedPGServiceServer
// for forward compatibility.
//
// A simple symetric service that can be implemented by either the service or app or both.  This
// service streams updates bidirectionally between both sides.
type PGServiceServer interface {
	StreamUpdates(grpc.BidiStreamingServer[PGUpdate, PGUpdate]) error
	mustEmbedUnimplementedPGServiceServer()
}

// UnimplementedPGServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPGServiceServer struct{}

func (UnimplementedPGServiceServer) StreamUpdates(grpc.BidiStreamingServer[PGUpdate, PGUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedPGServiceServer) mustEmbedUnimplementedPGServiceServer() {}
func (UnimplementedPGServiceServer) testEmbeddedByValue()                   {}

// UnsafePGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PGServiceServer will
// result in compilation errors.
type UnsafePGServiceServer interface {
	mustEmbedUnimplementedPGServiceServer()
}

func RegisterPGServiceServer(s grpc.ServiceRegistrar, srv PGServiceServer) {
	// If the following call pancis, it indicates UnimplementedPGServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PGService_ServiceDesc, srv)
}

func _PGService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PGServiceServer).StreamUpdates(&grpc.GenericServerStream[PGUpdate, PGUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PGService_StreamUpdatesServer = grpc.BidiStreamingServer[PGUpdate, PGUpdate]

// PGService_ServiceDesc is the grpc.ServiceDesc for PGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PGService",
	HandlerType: (*PGServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _PGService_StreamUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pg.proto",
}
