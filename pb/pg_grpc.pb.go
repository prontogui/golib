// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/pg.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PGServiceClient is the client API for PGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PGServiceClient interface {
	StreamUpdates(ctx context.Context, opts ...grpc.CallOption) (PGService_StreamUpdatesClient, error)
}

type pGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPGServiceClient(cc grpc.ClientConnInterface) PGServiceClient {
	return &pGServiceClient{cc}
}

func (c *pGServiceClient) StreamUpdates(ctx context.Context, opts ...grpc.CallOption) (PGService_StreamUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PGService_ServiceDesc.Streams[0], "/PGService/StreamUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &pGServiceStreamUpdatesClient{stream}
	return x, nil
}

type PGService_StreamUpdatesClient interface {
	Send(*PGUpdate) error
	Recv() (*PGUpdate, error)
	grpc.ClientStream
}

type pGServiceStreamUpdatesClient struct {
	grpc.ClientStream
}

func (x *pGServiceStreamUpdatesClient) Send(m *PGUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pGServiceStreamUpdatesClient) Recv() (*PGUpdate, error) {
	m := new(PGUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PGServiceServer is the server API for PGService service.
// All implementations must embed UnimplementedPGServiceServer
// for forward compatibility
type PGServiceServer interface {
	StreamUpdates(PGService_StreamUpdatesServer) error
	mustEmbedUnimplementedPGServiceServer()
}

// UnimplementedPGServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPGServiceServer struct {
}

func (UnimplementedPGServiceServer) StreamUpdates(PGService_StreamUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedPGServiceServer) mustEmbedUnimplementedPGServiceServer() {}

// UnsafePGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PGServiceServer will
// result in compilation errors.
type UnsafePGServiceServer interface {
	mustEmbedUnimplementedPGServiceServer()
}

func RegisterPGServiceServer(s grpc.ServiceRegistrar, srv PGServiceServer) {
	s.RegisterService(&PGService_ServiceDesc, srv)
}

func _PGService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PGServiceServer).StreamUpdates(&pGServiceStreamUpdatesServer{stream})
}

type PGService_StreamUpdatesServer interface {
	Send(*PGUpdate) error
	Recv() (*PGUpdate, error)
	grpc.ServerStream
}

type pGServiceStreamUpdatesServer struct {
	grpc.ServerStream
}

func (x *pGServiceStreamUpdatesServer) Send(m *PGUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pGServiceStreamUpdatesServer) Recv() (*PGUpdate, error) {
	m := new(PGUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PGService_ServiceDesc is the grpc.ServiceDesc for PGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PGService",
	HandlerType: (*PGServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _PGService_StreamUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pg.proto",
}
